class MyQueue {
    Stack<Integer> stac1 = new Stack<Integer>();
    Stack<Integer> stac2 = new Stack<Integer>();
    
    /** Initialize your data structure here. */
    public MyQueue() {
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stac1.push(x);
    }
    
    public void fillStac2(){
        while(!stac1.empty())
            stac2.push(stac1.pop());
    }
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(!stac2.empty())
            return stac2.pop();
        else
        {
            fillStac2();
        }
        return stac2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(!stac2.empty())
            return stac2.peek();
        else
        {
            fillStac2();
        }
        return stac2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stac1.empty() && stac2.empty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
